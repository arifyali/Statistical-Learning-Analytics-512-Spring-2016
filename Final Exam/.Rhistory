cor(hepatitis)
class(hepatitis)
cor(hepatitis)
?cor
hepatitis <- read.csv("hepatitis.data", header=FALSE, colClasses = "numeric")
hepatitis = as.data.frame(mapply(as.numeric, hepatitis))
cor(hepatitis)
data(Carseats)
library(ISLR)
data(Carseats)
View(Carseats)
Carseats = na.omit(Carseats)
cor(hepatitis)[,19]
?read.csv
hepatitis <- read.csv("hepatitis.data", header=FALSE, na.strings = "?")
View(hepatitis)
mean(hepatitis$V19, na.rm = T)
lm(V19~V18, data = hepatitis)
cor(hepatitis)[,16]
cor(hepatitis)
cor(hepatitis, na.rm = T)
cor(na.omit(hepatitis))
cor(na.omit(hepatitis))[,16]
hepatitis_no_predictor = hepatitis[, -20]
hepatitis_no_predictor = na.omit(hepatitis[, -20])
hepatitis = as.data.frame(mapply(as.numeric, hepatitis))
hepatitis = na.omit(hepatitis)
mapply(function(x){sum(is.na(x))}, hepatitis)
hepatitis <- read.csv("hepatitis.data", header=FALSE, na.strings = "?")
mapply(function(x){sum(is.na(x))}, hepatitis)
hepatitis_no_predictor = na.omit(hepatitis[, -20])
lm(V19~. data = hepatitis)
lm(V19~., data = hepatitis)
summary(lm(V19~., data = hepatitis))
training = sample(nrow(hepatitis_no_predictor), nrow(hepatitis_no_predictor))
training = sample(nrow(hepatitis_no_predictor), nrow(hepatitis_no_predictor)*.7)
lm(V19~., data = hepatitis[training,])
lm(V19~., data = hepatitis_no_predictor[training,])
V19_lm = lm(V19~., data = hepatitis_no_predictor[training,])
summary(V19_lm)
hc.out=hclust(dist(hepatitis[training,]))
hc.clusters=cutree(hc.out,2)
hc.clusters
table(hc.clusters)
table(hc.clusters, V20)
table(names(hc.clusters),hc.clusters)
table(hc.clusters,names(hc.clusters))
table(hc.clusters,hepatitis[training,"20"])
length(hc.clusters)
length(hepatitis[training,"20"])
table(hc.clusters,hepatitis[training,"20"])
?scale
hep_train = hepatitis[training,]
hep_scale = scale(hep_train)
hc.out=hclust(dist(hep_scale))
View(hep_scale)
nrow(hepatitis)
training = sample(nrow(hepatitis), 105)
hep_train = hepatitis[training,]
hep_scale = scale(hep_train)
View(hep_scale)
hc.out=hclust(dist(hep_scale))
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V20)
plot(hc.out, labels=hepatitis[training,"20"])
km.out=kmeans(hep_scale, 2, nstart=20)
km.out=kmeans(na.omit(hep_scale), 2, nstart=20)
km.clusters=km.out$cluster
km.clusters
View(hep_train)
table(km.clusters,na.omit(hep_scale)[,20])
table(km.clusters,na.omit(hep_train)[,20])
plot(km.clusters)
plot(km.clusters, labels=na.omit(hep_train)[,20])
pr.out=prcomp(hep_train, scale=TRUE)
pr.out=prcomp(na.omit(hep_train), scale=TRUE)
plot(hc.out, labels=hepatitis[training,1])
table(hc.clusters,hep_train$V1)
hep_train = hepatitis[training,]
hep_scale = scale(hep_train)
hc.out=hclust(dist(hep_scale))
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
table(hc.clusters,hep_train$V1, method="single")
hc.out=hclust(dist(hep_scale),  method="single")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="average")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="complete")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
par(mfrow = c(1,3))
hep_train = hepatitis[training,]
hep_scale = scale(hep_train)
hc.out=hclust(dist(hep_scale),  method="average")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="complete")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="single")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
library(FNN)
kv(hep_train[,-1], cl = as.factor(hep_train$V1), k = 1)
knn.cv(hep_train[,-1], cl = as.factor(hep_train$V1), k = 1)
?knn
knn(hep_train[,-1], cl = as.factor(hep_train$V1), k = 1)
library(MASS)
?lda
lda(V1~.,data = hep_train)
lda_hep = lda(V1~.,data = hep_train)
predict(lda_hep, hepatitis[-training,])
hepatitis <- read.csv("hepatitis.data", header=FALSE, na.strings = "?")
hepatitis$V1 = as.factor(hepatitis$V1)
mapply(function(x){sum(is.na(x))}, hepatitis)
training = sample(nrow(hepatitis), 105)
par(mfrow = c(1,3))
hep_train = hepatitis[training,]
hep_scale = scale(hep_train)
hep_train$V1 = as.factor(hep_train$V1)
lda_hep = lda(V1~.,data = hep_train)
predict(lda_hep, hepatitis[-training,])
predict(lda_hep, hepatitis[-training,])$class
hep_train$V1 = as.factor(hep_train$V1)
lda_hep = lda(V1~.,data = hep_train, na.action = "na.pass")
lda_hep = lda(V1~.,data = hep_train, na.action = "na.fail")
library(tree)
library(gbm)
library(randomForest)
hep_boost = gbm(V1~.,data = hep_train, n.trees=1000)
?gbm
hepatitis <- read.csv("hepatitis.data", header=FALSE, na.strings = "?")
hepatitis$V1 = hepatitis$V1-1
mapply(function(x){sum(is.na(x))}, hepatitis)
training = sample(nrow(hepatitis), 105)
par(mfrow = c(1,3))
hep_train = hepatitis[training,]
hep_scale = scale(hep_train)
hc.out=hclust(dist(hep_scale),  method="average")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="complete")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="single")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hep_boost = gbm(V1~.,data = hep_train, n.trees=1000)
summary(hep_boost)
plot(hep_boost, i = "V18")
plot(hep_boost, i = "V15")
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000)
yhat.boost
?predict
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000, type = "class")
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000, type = "response")
?predict
yhat.boost
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000, type = "link")
yhat.boost
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000, type = "response")
yhat.boost[yhat.boost>.5] = 1
yhat.boost
yhat.boost = hepatitis$V1[-training]
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000, type = "response")
yhat.boost[yhat.boost>.5] = 1
yhat.boost != hepatitis$V1[-training]
mean(yhat.boost != hepatitis$V1[-training])
mapply(function(x){sum(is.na(x))}, hepatitis)
glm(V1~.,data = hep_train, family = "binomial")
hep_lm = glm(V1~.,data = hep_train, family = "binomial")
glm(hep_lm)
summary(hep_lm)
hepatitis$V1
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=5000, type = "response")
yhat.boost[yhat.boost>.5] = 1
mean(yhat.boost != hepatitis$V1[-training])
hep_boost = gbm(V1~.,data = hep_train, n.trees=1000)
summary(hep_boost)
plot(hep_boost, i = "V18")
plot(hep_boost, i = "V15")
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=5000, type = "response")
yhat.boost[yhat.boost>.5] = 1
mean(yhat.boost != hepatitis$V1[-training])@
)
mean(yhat.boost != hepatitis$V1[-training])
hep_boost = gbm(V1~.,data = hep_train, n.trees=1000, shrinkage = 1e-2)
summary(hep_boost)
plot(hep_boost, i = "V18")
plot(hep_boost, i = "V15")
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response")
yhat.boost[yhat.boost>.5] = 1
mean(yhat.boost != hepatitis$V1[-training])
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000, type = "response")
yhat.boost[yhat.boost>.5] = 1
mean(yhat.boost != hepatitis$V1[-training])
hep_boost = gbm(V1~.,data = hep_train, n.trees=1000, shrinkage = 1e-3)
summary(hep_boost)
plot(hep_boost, i = "V18")
plot(hep_boost, i = "V15")
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response")
yhat.boost[yhat.boost>.5] = 1
mean(yhat.boost != hepatitis$V1[-training])
hep_boost = gbm(V1~.,data = hep_train[, 18], n.trees=1000, shrinkage = 1e-3)
hep_boost = gbm(V1~.,data = hep_train[, c(1,18)], n.trees=1000, shrinkage = 1e-3)
summary(hep_boost)
plot(hep_boost, i = "V18")
plot(hep_boost, i = "V15")
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response")
yhat.boost[yhat.boost>.5] = 1
yhat.boost
mean(yhat.boost != hepatitis$V1[-training])
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response")
yhat.boost
hep_boost = gbm(V1~.,data = hep_train[, c(1,18)], n.trees=1000)
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response")
yhat.boost[yhat.boost>.5] = 1
mean(yhat.boost != hepatitis$V1[-training])
hep_boost = gbm(V1~.,data = hep_train[, c(1,20)], n.trees=1000)
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response")
yhat.boost[yhat.boost>.5] = 1
mean(yhat.boost != hepatitis$V1[-training])
hep_boost = gbm(V1~.,data = hep_train[, c(1,20)], distribution = "multinomial", n.trees=1000)
hep_boost = gbm(V1~.,data = hep_train, distribution = "multinomial", n.trees=1000)
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response")
yhat.boost[yhat.boost>.5] = 1
yhat.boost=predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response")
yhat.boost
rowsum(yhat.boost)
rowSums(yhat.boost)
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
yhat.boost[,1]
yhat.boost
type(yhat.boost)
class(yhat.boost)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
boot_results
mean(yhat.boost != hepatitis$V1[-training])
yhat.boost
mean(boot_results != hepatitis$V1[-training])
summary(hep_boost)
hep_boost = gbm(V1~.,data = hep_train[,c(1,18)], distribution = "multinomial", n.trees=1000)
hep_train[,c(1,18)]
hep_boost = gbm(V1~.,data = hep_train[,c(1,18)], distribution = "multinomial", n.trees=1000)
hep_boost = gbm(V1~V18,data = hep_train[,c(1,18)], distribution = "multinomial", n.trees=1000)
hep_boost = gbm(V1~V18,data = hep_train, distribution = "multinomial", n.trees=1000)
hep_boost = gbm(V1~V18+V15,data = hep_train, distribution = "multinomial", n.trees=1000)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_boost = gbm(V1~V18+V15+V13,data = hep_train, distribution = "multinomial", n.trees=1000)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_boost = gbm(V1~V18+V15,data = hep_train, distribution = "multinomial", n.trees=100)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=100,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_boost = gbm(V1~V18+V15,data = hep_train, distribution = "multinomial", n.trees=500)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=500,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_boost = gbm(V1~V18+V15,data = hep_train, distribution = "multinomial", n.trees=750)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=750,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_boost = gbm(V1~V18+V15,data = hep_train, distribution = "multinomial", n.trees=250)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=250,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_boost = gbm(V1~V18+V15,data = hep_train, distribution = "multinomial", n.trees=400)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=400,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
library(MASS)
?tree
hep_tree = tree(formula = V1 ~ ., data = hep_train,)
hep_tree
summary(hep_tree)
plot(hep_tree)
text(hep_tree ,pretty =0)
hepatitis$V1 = as.factor(hepatitis$V1-1)
hep_tree = tree(formula = V1 ~ ., data = hep_train)
summary(hep_tree)
plot(hep_tree)
text(hep_tree ,pretty =0)
hep_tree = tree(formula = V1 ~ ., data = hep_train)
summary(hep_tree)
plot(hep_tree)
text(hep_tree ,pretty =0)
hep_train$V1 = ifelse(hep_train == 1 , "Alive", "Dead")
hep
hep_tree = tree(formula = V1 ~ ., data = hep_train)
hep_train$V1 = ifelse(hep_train == 1 , "Yes", "No")
hepatitis <- read.csv("hepatitis.data", header=FALSE, na.strings = "?")
hepatitis$V1 = as.factor(hepatitis$V1-1)
mapply(function(x){sum(is.na(x))}, hepatitis)
training = sample(nrow(hepatitis), 105)
par(mfrow = c(1,3))
hep_train = hepatitis[training,]
hep_scale = scale(hep_train)
hc.out=hclust(dist(hep_scale),  method="average")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="complete")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="single")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hep_boost = gbm(V1~.,data = hep_train, distribution = "multinomial", n.trees=1000)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_boost = gbm(V1~V18+V15,data = hep_train, distribution = "multinomial", n.trees=400)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=400,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_train$V1 = ifelse(hep_train$V1 == 1 , "Alive", "Dead")
hep_tree = tree(formula = V1 ~ ., data = hep_train)
summary(hep_tree)
hepatitis <- read.csv("hepatitis.data", header=FALSE, na.strings = "?")
hepatitis$V1 = as.factor(hepatitis$V1-1)
mapply(function(x){sum(is.na(x))}, hepatitis)
training = sample(nrow(hepatitis), 105)
par(mfrow = c(1,3))
hep_train = hepatitis[training,]
hep_scale = scale(hep_train)
hc.out=hclust(dist(hep_scale),  method="average")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="complete")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hc.out=hclust(dist(hep_scale),  method="single")
hc.clusters=cutree(hc.out,2)
table(hc.clusters,hep_train$V1)
plot(hc.out, labels=hepatitis[training,1])
hep_boost = gbm(V1~.,data = hep_train, distribution = "multinomial", n.trees=1000)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=1000,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_boost = gbm(V1~V18+V15,data = hep_train, distribution = "multinomial", n.trees=400)
yhat.boost=as.data.frame(predict(hep_boost,newdata=hepatitis[-training,], n.trees=400,  type = "response"))
boot_results = 1:50
boot_results[yhat.boost[,1]>yhat.boost[,2]]=0
boot_results[yhat.boost[,2]>yhat.boost[,1]]=1
mean(boot_results != hepatitis$V1[-training])
hep_tree = tree(formula = V1 ~ ., data = hep_train)
summary(hep_tree)
plot(hep_tree)
text(hep_tree ,pretty =0)
predict(hep_tree, hepatitis[-training,])
predict(hep_tree, hepatitis[-training,], type = "class")
mean(predict(hep_tree, hepatitis[-training,], type = "class") != hepatitis[-training,1])
table(boot_results, hepatitis$V1[-training])
table(predict(hep_tree, hepatitis[-training,], type = "class"), hepatitis[-training,1])
mean(tree_pred != hepatitis[-training,1])
tree_pred = predict(hep_tree, hepatitis[-training,], type = "class")
mean(tree_pred != hepatitis[-training,1])
table(tree_pred, hepatitis[-training,1])
library(randomForest)
hep_bag=randomForest(medv~.,data=hep_train, mtry=ncol(hep_train)-1,importance =TRUE)
hep_bag=randomForest(V1~.,data=hep_train, mtry=ncol(hep_train)-1,importance =TRUE)
library(e1071)
?svm
hep_svm=svm(V1~.,data=hep_train)
summary(hep_svm)
predict(hep_svm, hepatitis[-train,])
dim(hepatitis[-train,])
predict(hep_svm, hepatitis[-training,])
dim(na.omit(hepatitis[-training,]))
hep_lasso = glmnet(hep_train[, c(2,3,5,20)], hep_train$V1, family = "binomial",alpha=1, lambda=grid)
x = model.matrix(V1~V2+V3+V5+V20,hep_train)[,-1]
y = hep_train$V1
hep_lasso = glmnet(x, y, family = "binomial",alpha=1, lambda=grid)
plot(hep_lasso)
x = model.matrix(V1~V2+V3+V5+V20,hepatitis)[,-1]
y = hep_train$V1
hep_lasso = glmnet(x[train ,],y[train], family = "binomial",alpha=1, lambda=grid)
x = model.matrix(V1~V2+V3+V5+V20,hepatitis)[,-1]
y = hep_train$V1
hep_lasso = glmnet(x[training,],y[training], family = "binomial",alpha=1, lambda=grid)
y[training]
x = model.matrix(V1~V2+V3+V5+V20,hepatitis)[,-1]
y = hepatitis$V1
hep_lasso = glmnet(x[training,],y[training], family = "binomial",alpha=1, lambda=grid)
cv.out=cv.glmnet(x[training ,],y[training],alpha=1)
x = model.matrix(V1~V2+V3+V5+V20,hepatitis)[,-1]
y = as.numeric(hepatitis$V1)
hep_lasso = glmnet(x[training,],y[training], family = "binomial",alpha=1, lambda=grid)
cv.out=cv.glmnet(x[training ,],y[training],alpha=1)
par(mfrow = c(1,1))
plot(cv.out)
bestlam=cv.out$lambda .min
bestlam=cv.out$lambda.min
bestlam
lasso.pred=predict(hep_lasso,s=bestlam ,newx=x[-training,])
lasso.pred
lasso.pred=predict(hep_lasso,s=bestlam ,newx=x[-training,], type = "class")
lasso.pred
lasso.pred=as.numeric(predict(hep_lasso,s=bestlam ,newx=x[-training,], type = "class")[,1])
lasso.pred=
daD
lasso.pred
Y
y
lasso.pred != y[-training]
mean(lasso.pred != y[-training])
out=glmnet(x[training ,],y[training],alpha=1,lambda=grid)
lasso.coef=predict(out,type="coefficients",s=bestlam)
lasso.coef
out=glmnet(x,y,alpha=1,lambda=grid)
lasso.coef=predict(out,type="coefficients",s=bestlam)
lasso.coef
library(leaps)
ozone_best_subset = regsubsets(maxoz~.,Ozone_train[,c("maxoz","pressh","wind","hum",
"temp1","temp2","inverh","pressg","invert","vis")])
plot(summary(ozone_best_subset)$bic ,
xlab="Number of Variables ",ylab="BIC", type='l')
points(which.min(summary(ozone_best_subset)$bic),
summary(ozone_best_subset)$bic[which.min(summary(ozone_best_subset)$bic)],
col="red",cex=2,pch=20)
model = coef(ozone_best_subset ,which.min(summary(ozone_best_subset)$bic))
model
model = coef(ozone_best_subset ,which.min(summary(ozone_best_subset)$bic))[-1]
model
name(model)
names(model)
best_oz_model = glm(maxoz~., Ozone_train[, c(4, which(names(Ozone) %in% names(model)))])
?glm
best_oz_model = glm(maxoz~., Ozone_train[, c(4, which(names(Ozone) %in% names(model)))], family = "gaussian")
best_oz_model
model
predict(best_oz_model, Ozone[-train, which(names(Ozone) %in% names(model))])
RSS = sum((predict(best_oz_model, Ozone[-train, which(names(Ozone) %in% names(model))])-Ozone[-train,4])^2)
RSS
RSE = sqrt(RSS/(nrow(Ozone[-train,])-(ncol(Ozone_train)-1)-1))
RSE
library(splines)
RSE = 2:40
ozone_smoothing.splines = smooth.spline(Ozone_train$time,
Ozone_train$maxoz, df = i)
predict(ozone_smoothing.splines,
Ozone[-train,])
?smooth.spline
predict(ozone_smoothing.splines,
Ozone[-train,"time"])
for(i in 2:40){
ozone_smoothing.splines = smooth.spline(Ozone_train$time,
Ozone_train$maxoz, df = i)
RSS = sum((predict(ozone_smoothing.splines,
Ozone[-train,"time"])$y-Ozone[-train,"maxoz"])^2)
RSE[i-1] = sqrt(RSS/(nrow(Ozone[-train,])-(ncol(Ozone_train)-1)-1))
}
RSE
plot(2:40, RSE, xlab = "degrees of freedom")
plot(2:40, RSE, xlab = "degrees of freedom", type = "b")
points(which.min(RSE)+1,
RSE[which.min(RSE)],
col="red",cex=2,pch=20)
which.min(RSE)
points((which.min(RSE)+1),
RSE[which.min(RSE)],
col="red",cex=2,pch=20)
RSE
RSE[which.min(RSE)]
mapply(function(x){sum(is.na(x))}, hep_train)
mapply(function(x){sum(is.na(x))}, hepatitis[,-1])
table(lasso.pred, y[-training])
